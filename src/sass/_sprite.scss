// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$arrow-dark-name: 'arrow_dark';
$arrow-dark-x: 0px;
$arrow-dark-y: 22px;
$arrow-dark-offset-x: 0px;
$arrow-dark-offset-y: -22px;
$arrow-dark-width: 9px;
$arrow-dark-height: 16px;
$arrow-dark-total-width: 20px;
$arrow-dark-total-height: 136px;
$arrow-dark-image: '/dist/img/sprite.png';
$arrow-dark: (0px, 22px, 0px, -22px, 9px, 16px, 20px, 136px, '/dist/img/sprite.png', 'arrow_dark', );
$arrow-down-dark-name: 'arrow_down_dark';
$arrow-down-dark-x: 0px;
$arrow-down-dark-y: 0px;
$arrow-down-dark-offset-x: 0px;
$arrow-down-dark-offset-y: 0px;
$arrow-down-dark-width: 11px;
$arrow-down-dark-height: 7px;
$arrow-down-dark-total-width: 20px;
$arrow-down-dark-total-height: 136px;
$arrow-down-dark-image: '/dist/img/sprite.png';
$arrow-down-dark: (0px, 0px, 0px, 0px, 11px, 7px, 20px, 136px, '/dist/img/sprite.png', 'arrow_down_dark', );
$arrow-light-name: 'arrow_light';
$arrow-light-x: 0px;
$arrow-light-y: 38px;
$arrow-light-offset-x: 0px;
$arrow-light-offset-y: -38px;
$arrow-light-width: 10px;
$arrow-light-height: 16px;
$arrow-light-total-width: 20px;
$arrow-light-total-height: 136px;
$arrow-light-image: '/dist/img/sprite.png';
$arrow-light: (0px, 38px, 0px, -38px, 10px, 16px, 20px, 136px, '/dist/img/sprite.png', 'arrow_light', );
$baloon-name: 'baloon';
$baloon-x: 0px;
$baloon-y: 92px;
$baloon-offset-x: 0px;
$baloon-offset-y: -92px;
$baloon-width: 16px;
$baloon-height: 22px;
$baloon-total-width: 20px;
$baloon-total-height: 136px;
$baloon-image: '/dist/img/sprite.png';
$baloon: (0px, 92px, 0px, -92px, 16px, 22px, 20px, 136px, '/dist/img/sprite.png', 'baloon', );
$clock-name: 'clock';
$clock-x: 0px;
$clock-y: 72px;
$clock-offset-x: 0px;
$clock-offset-y: -72px;
$clock-width: 20px;
$clock-height: 20px;
$clock-total-width: 20px;
$clock-total-height: 136px;
$clock-image: '/dist/img/sprite.png';
$clock: (0px, 72px, 0px, -72px, 20px, 20px, 20px, 136px, '/dist/img/sprite.png', 'clock', );
$lupa-name: 'lupa';
$lupa-x: 0px;
$lupa-y: 54px;
$lupa-offset-x: 0px;
$lupa-offset-y: -54px;
$lupa-width: 18px;
$lupa-height: 18px;
$lupa-total-width: 20px;
$lupa-total-height: 136px;
$lupa-image: '/dist/img/sprite.png';
$lupa: (0px, 54px, 0px, -54px, 18px, 18px, 20px, 136px, '/dist/img/sprite.png', 'lupa', );
$mail-name: 'mail';
$mail-x: 0px;
$mail-y: 7px;
$mail-offset-x: 0px;
$mail-offset-y: -7px;
$mail-width: 17px;
$mail-height: 15px;
$mail-total-width: 20px;
$mail-total-height: 136px;
$mail-image: '/dist/img/sprite.png';
$mail: (0px, 7px, 0px, -7px, 17px, 15px, 20px, 136px, '/dist/img/sprite.png', 'mail', );
$phone-name: 'phone';
$phone-x: 0px;
$phone-y: 114px;
$phone-offset-x: 0px;
$phone-offset-y: -114px;
$phone-width: 13px;
$phone-height: 22px;
$phone-total-width: 20px;
$phone-total-height: 136px;
$phone-image: '/dist/img/sprite.png';
$phone: (0px, 114px, 0px, -114px, 13px, 22px, 20px, 136px, '/dist/img/sprite.png', 'phone', );
$spritesheet-width: 20px;
$spritesheet-height: 136px;
$spritesheet-image: '/dist/img/sprite.png';
$spritesheet-sprites: ($arrow-dark, $arrow-down-dark, $arrow-light, $baloon, $clock, $lupa, $mail, $phone, );
$spritesheet: (20px, 136px, '/dist/img/sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
