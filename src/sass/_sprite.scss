// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$coffeecup-name: 'coffeecup';
$coffeecup-x: 0px;
$coffeecup-y: 72px;
$coffeecup-offset-x: 0px;
$coffeecup-offset-y: -72px;
$coffeecup-width: 104px;
$coffeecup-height: 82px;
$coffeecup-total-width: 308px;
$coffeecup-total-height: 577px;
$coffeecup-image: '../img/sprite.png';
$coffeecup: (0px, 72px, 0px, -72px, 104px, 82px, 308px, 577px, '../img/sprite.png', 'coffeecup', );
$notebook-name: 'notebook';
$notebook-x: 0px;
$notebook-y: 310px;
$notebook-offset-x: 0px;
$notebook-offset-y: -310px;
$notebook-width: 308px;
$notebook-height: 267px;
$notebook-total-width: 308px;
$notebook-total-height: 577px;
$notebook-image: '../img/sprite.png';
$notebook: (0px, 310px, 0px, -310px, 308px, 267px, 308px, 577px, '../img/sprite.png', 'notebook', );
$pensils-name: 'pensils';
$pensils-x: 0px;
$pensils-y: 154px;
$pensils-offset-x: 0px;
$pensils-offset-y: -154px;
$pensils-width: 177px;
$pensils-height: 156px;
$pensils-total-width: 308px;
$pensils-total-height: 577px;
$pensils-image: '../img/sprite.png';
$pensils: (0px, 154px, 0px, -154px, 177px, 156px, 308px, 577px, '../img/sprite.png', 'pensils', );
$sunglasses-name: 'sunglasses';
$sunglasses-x: 0px;
$sunglasses-y: 0px;
$sunglasses-offset-x: 0px;
$sunglasses-offset-y: 0px;
$sunglasses-width: 117px;
$sunglasses-height: 72px;
$sunglasses-total-width: 308px;
$sunglasses-total-height: 577px;
$sunglasses-image: '../img/sprite.png';
$sunglasses: (0px, 0px, 0px, 0px, 117px, 72px, 308px, 577px, '../img/sprite.png', 'sunglasses', );
$spritesheet-width: 308px;
$spritesheet-height: 577px;
$spritesheet-image: '../img/sprite.png';
$spritesheet-sprites: ($coffeecup, $notebook, $pensils, $sunglasses, );
$spritesheet: (308px, 577px, '../img/sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
